// Деструктуризация объектов и массивов:
const { firstName, lastName } = user; // Извлечение значений из объекта user
const [first, second, third] = array; // Извлечение значений из массива array

// Функции стрелок (Arrow functions):
// Позволяют создавать краткие и читаемые функции.
Пример использования:

const sum = (a, b) => a + b; // Сокращенная запись функции сложения
const square = num => num * num; // Функция с одним параметром

// Spread-оператор:
// Позволяет разворачивать элементы массива или объекта и использовать их в другом контексте.
// Пример использования:
Copy code
const array1 = [1, 2, 3];
const array2 = [...array1, 4, 5, 6]; // Объединение массивов
const obj1 = { x: 1, y: 2 };
const obj2 = { ...obj1, z: 3 }; // Создание нового объекта с добавленным свойством
Методы массивов:

// JavaScript предлагает множество удобных методов для работы с массивами, таких как map(), filter(), reduce() и др.
// Пример использования:
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(num => num * 2); // Удвоение каждого элемента массива
const evenNumbers = numbers.filter(num => num % 2 === 0); // Фильтрация четных чисел
const sum = numbers.reduce((acc, num) => acc + num, 0); // Вычисление суммы элементов массива

// Шаблонные строки (Template literals):

//Позволяют создавать строки с встроенными переменными и выражениями, делая код более читаемым.
// Пример использования:
const name = 'John';
const message = `Hello, ${name}!`; // Использование переменной внутри строки
const sum = `The sum of 2 and 3 is ${2 + 3}`; // Встраивание выражения
